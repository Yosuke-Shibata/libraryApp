/*
 * This file is generated by jOOQ.
 */
package yoshibata.exam.quocard.libraryApp.JOOQ.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import yoshibata.exam.quocard.libraryApp.JOOQ.Keys;
import yoshibata.exam.quocard.libraryApp.JOOQ.LibraryAppSchema;
import yoshibata.exam.quocard.libraryApp.JOOQ.tables.Author.AuthorPath;
import yoshibata.exam.quocard.libraryApp.JOOQ.tables.Book.BookPath;
import yoshibata.exam.quocard.libraryApp.JOOQ.tables.records.WorkRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Work extends TableImpl<WorkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library_app_schema.work</code>
     */
    public static final Work WORK = new Work();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkRecord> getRecordType() {
        return WorkRecord.class;
    }

    /**
     * The column <code>library_app_schema.work.book_id</code>.
     */
    public final TableField<WorkRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>library_app_schema.work.author_id</code>.
     */
    public final TableField<WorkRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Work(Name alias, Table<WorkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Work(Name alias, Table<WorkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>library_app_schema.work</code> table reference
     */
    public Work(String alias) {
        this(DSL.name(alias), WORK);
    }

    /**
     * Create an aliased <code>library_app_schema.work</code> table reference
     */
    public Work(Name alias) {
        this(alias, WORK);
    }

    /**
     * Create a <code>library_app_schema.work</code> table reference
     */
    public Work() {
        this(DSL.name("work"), null);
    }

    public <O extends Record> Work(Table<O> path, ForeignKey<O, WorkRecord> childPath, InverseForeignKey<O, WorkRecord> parentPath) {
        super(path, childPath, parentPath, WORK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WorkPath extends Work implements Path<WorkRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> WorkPath(Table<O> path, ForeignKey<O, WorkRecord> childPath, InverseForeignKey<O, WorkRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WorkPath(Name alias, Table<WorkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WorkPath as(String alias) {
            return new WorkPath(DSL.name(alias), this);
        }

        @Override
        public WorkPath as(Name alias) {
            return new WorkPath(alias, this);
        }

        @Override
        public WorkPath as(Table<?> alias) {
            return new WorkPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LibraryAppSchema.LIBRARY_APP_SCHEMA;
    }

    @Override
    public UniqueKey<WorkRecord> getPrimaryKey() {
        return Keys.WORK_PKEY;
    }

    @Override
    public List<ForeignKey<WorkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WORK__WORK_AUTHOR_ID_FKEY, Keys.WORK__WORK_BOOK_ID_FKEY);
    }

    private transient AuthorPath _author;

    /**
     * Get the implicit join path to the <code>library_app_schema.author</code>
     * table.
     */
    public AuthorPath author() {
        if (_author == null)
            _author = new AuthorPath(this, Keys.WORK__WORK_AUTHOR_ID_FKEY, null);

        return _author;
    }

    private transient BookPath _book;

    /**
     * Get the implicit join path to the <code>library_app_schema.book</code>
     * table.
     */
    public BookPath book() {
        if (_book == null)
            _book = new BookPath(this, Keys.WORK__WORK_BOOK_ID_FKEY, null);

        return _book;
    }

    @Override
    public Work as(String alias) {
        return new Work(DSL.name(alias), this);
    }

    @Override
    public Work as(Name alias) {
        return new Work(alias, this);
    }

    @Override
    public Work as(Table<?> alias) {
        return new Work(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Work rename(String name) {
        return new Work(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Work rename(Name name) {
        return new Work(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Work rename(Table<?> name) {
        return new Work(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Work where(Condition condition) {
        return new Work(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Work where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Work where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Work where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Work where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Work where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Work where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Work where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Work whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Work whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
